# task_02_01 - Напишите программу, которая считывает со стандартного ввода целые числа,
# по одному числу в строке, и после первого введенного нуля выводит сумму
# полученных на вход чисел.

n = int(input())
summ = n
while n != 0:
    n = int(input())
    summ += n
print(summ)


# task_02_02 - В Институте биоинформатики между информатиками и биологами устраивается
# соревнование. Победителям соревнования достанется большой и вкусный пирог.
# В команде биологов a человек, а в команде информатиков — b человек.
#
# Нужно заранее разрезать пирог таким образом, чтобы можно было раздать
# кусочки пирога любой команде, выигравшей соревнование, при этом каждому
# участнику этой команды должно достаться одинаковое число кусочков пирога.
# И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти
# минимальное подходящее число.
#
# Напишите программу, которая помогает найти это число.
# Программа должна считывать размеры команд (два положительных целых числа a
# и b, каждое число вводится на отдельной строке) и выводить наименьшее
# число d, которое делится на оба этих числа без остатка.


a = int(input())
b = int(input())

i = 1
while i%a != 0 or i%b != 0:
    i += 1
print(i)


# task_02_03 - Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
#
# Для каждого введённого числа проверить:
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.


while True:
    n = int(input())
    if n < 10:
        continue
    if n > 100:
        break
    print(n)


# task_02_04 - Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками.
# Для тренировок ему бы очень пригодилась программа, которая показывала бы блок
# таблицы умножения.
#
# Напишите программу, на вход которой даются четыре числа a, b, c и d, каждое
# в своей строке. Программа должна вывести фрагмент таблицы умножения для всех
# чисел отрезка [a;b] на все числа отрезка [c;d].
#
# Числа a, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.
#
# Следуйте формату вывода из примера, для разделения элементов внутри строки используйте
# '\t' — символ табуляции. Заметьте, что левым столбцом и верхней строкой выводятся сами
# числа из заданных отрезков — заголовочные столбец и строка таблицы.


a = int(input())
b = int(input())
c = int(input())
d = int(input())

print(end='\t')
for j in range(c, d + 1):
    print(j, end='\t')
print()
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print()


# task_02_05 - Напишите программу, которая считывает с клавиатуры два числа a и b,
# считает и выводит на консоль среднее арифметическое всех чисел
# из отрезка [a;b], которые делятся на 3.
#
# В приведенном ниже примере среднее арифметическое считается для чисел
# на отрезке [−5;12]. Всего чисел, делящихся на 3, на этом отрезке 6:
#  −3,0,3,6,9,12. Их среднее арифметическое равно 4.54.
# На вход программе подаются интервалы, внутри которых всегда есть хотя бы
# одно число, которое делится на 33.


a = int(input())
b = int(input())

a = int((a - 0.01)// 3 + 1) * 3
summ = 0
k = 0
for i in range(a, b + 1, 3):
    summ += i
    k += 1
mean = summ / k
print(mean)


# task_02_06 - GC-состав является важной характеристикой геномных последовательностей и
# определяется как процентное соотношение суммы всех гуанинов и цитозинов
# к общему числу нуклеиновых оснований в геномной последовательности.
#
# Напишите программу, которая вычисляет процентное содержание символов
# G (гуанин) и C (цитозин) в введенной строке (программа не должна зависеть
# от регистра вводимых символов).

genome = input()
print((genome.upper().count('G') + genome.upper().count('C')) / len(genome) * 100)


# task_02_07 - Узнав, что ДНК не является случайной строкой, только что поступившие
# в Институт биоинформатики студенты группы информатиков предложили
# использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
#
# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых
# символов исходной строки заменяются на этот символ и количество его
# повторений в этой позиции строки.
#
# Напишите программу, которая считывает строку, кодирует её предложенным
# алгоритмом и выводит закодированную последовательность на стандартный вывод.
# Кодирование должно учитывать регистр символов.

s = input()
if s > "":
    snew = ""
    count = 0
    t = s[0]
    for c in s:
        if c == t:
            count += 1
        else:
            snew += t + str(count)
            t = c
            count = 1
    snew += t + str(count)
    print(snew)
else:
    print("")


# task_02_08 - Напишите программу, на вход которой подаётся список чисел одной строкой.
# Программа должна для каждого элемента этого списка вывести сумму двух его
# соседей. Для элементов списка, являющихся крайними, одним из соседей
# считается элемент, находящий на противоположном конце этого списка.
# Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается
# список "13 6 9 15 7" (без кавычек).
#
# Если на вход пришло только одно число, надо вывести его же.
#
# Вывод должен содержать одну строку с числами нового списка, разделёнными
# пробелом.

a = [int(i) for i in input().split()]
length = len(a)
if length == 1:
    print(a[0])
elif length == 2:
    print(a[0], a[1])
else:
    for i in range(length):
        if i == 0:
            print(a[1] + a[length - 1], end=" ")
        elif i == length - 1:
            print(a[0] + a[length - 2])
        else:
            print(a[i - 1] + a[i + 1], end=" ")


# task_02_09 - Напишите программу, которая принимает на вход список чисел в одной строке
# и выводит на экран в одну строку значения, которые повторяются в нём более одного раза.
#
# Для решения задачи может пригодиться метод sort списка.
#
# Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.

a = [int(i) for i in input().split()]
a.sort()
n = ""
prst = 0
for i in a:
    if i == n:
        if prst == 0:
            print(i, end=" ")
            prst = 1
    else:
        prst = 0
    n = i


# task_02_10 - Напишите программу, которая считывает с консоли числа (по одному в строке)
# до тех пор, пока сумма введённых чисел не будет равна 0 и сразу после этого
# выводит сумму квадратов всех считанных чисел.
#
# Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0,
# после этого считывание продолжать не нужно.
#
# В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем,
# что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая
# внимания на то, что остались ещё не прочитанные значения.

n = int(input())
s = n
s2 = n**2
while s != 0:
    n = int(input())
    s += n
    s2 += n**2
print(s2)


# task_02_11 - Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ...
# (число повторяется столько раз, чему равно). На вход программе передаётся положительное
# целое число n — столько элементов последовательности должна отобразить программа.
# На выходе ожидается последовательность чисел, записанных через пробел в одну строку.

n = int(input())
i = 1  # Счетчик выведенных чисел
m = 1  # Выводимое число
j = 1  # Счетчик количества выведенных чисел
while i <= n:
    while j <= m and i <= n:
        print(m)
        j += 1
        i += 1
    m += 1
    j = 1


# task_02_12 - Напишите программу, которая считывает список чисел lst из первой строки
# и число x из второй строки, которая выводит все позиции, на которых
# встречается число x в переданном списке lst.
#
# Позиции нумеруются с нуля, если число x не встречается в списке,
# вывести строку "Отсутствует" (без кавычек, с большой буквы).
#
# Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.

lst = [int(i) for i in input().split()]
x = int(input())

i = 0
st = 0
for n in lst:
    if n == x:
        print(i, end=" ")
        st = 1
    i += 1
if st == 0:
    print("Отсутствует")


# task_02_13 - Напишите программу, на вход которой подаётся прямоугольная матрица в виде
# последовательности строк, заканчивающихся строкой, содержащей только строку
# "end" (без кавычек)
#
# Программа должна вывести матрицу того же размера, у которой каждый элемент
# в позиции i, j равен сумме элементов первой матрицы на позициях
# (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент
# находится с противоположной стороны матрицы.
#
# В случае одной строки/столбца элемент сам себе является соседом
# по соответствующему направлению.

str = input()
i = 0
a = []
while str != "end":
    # str = str.split()
    a.append(str.split())
    # a[0].append(str.split())
    str = input()
    i += 1
rows = len(a)
columns = len(a[0])
a = [[int(a[i][j]) for j in range(columns)] for i in range(rows)]
# print(a)
b = [[0 for j in range(columns)] for i in range(rows)]
for i in range(rows):
    for j in range(columns):
        if 1 <= i:
            b[i][j] += a[i-1][j]
        else:
            b[i][j] += a[rows-1][j]
        if i <= rows - 2:
            b[i][j] = b[i][j] + a[i+1][j]
        else:
            b[i][j] += a[0][j]
        if 1 <= j:
            b[i][j] += a[i][j-1]
        else:
            b[i][j] += a[i][columns-1]
        if j <= columns - 2:
            b[i][j] = b[i][j] + a[i][j+1]
        else:
            b[i][j] += a[i][0]
# print(b)
for i in range(rows):
    for j in range(columns):
        print(b[i][j], end=" ")
    print()


# task_02_14 - Выведите таблицу размером n×n, заполненную числами от 1 до n2 по спирали,
# выходящей из левого верхнего угла и закрученной по часовой стрелке,
# как показано в примере (здесь n=5).

n = int(input())
a = [[0 for j in range(n)] for l in range(n)]
m = 0
t = n
k = 0
s = 0
i = 1
while m <= int(n / 2) + 1:
    s += 4 * t - 4
    while i <= s:  # Один круг
        if i <= t + k:  # В k хранится номер последнего элемента в одной итерации, в t хранится размер квадрата
            a[m][(i-k)+m-1] = i
        elif (t + k) + 1 <= i <= (2 * t + k) - 1:
            a[(i-k)+m-t][n-m-1] = i
        elif 2 * t + k <= i <= 3 * t + k - 2:
            a[t+m-1][(-((i-k)+1)%t)+m-1] = i
        elif 3 * t + k - 1 <= i <= 4 * t + k - 4:
            a[(-(i-k)+t-3)%t+m][m] = i
        i += 1
    k += 4 * t - 4
    t -= 2
    m += 1
if n % 2 == 1:
    a[int((n+1)/2)-1][int((n+1)/2)-1] = n**2
for i in range(n):
    for j in range(n):
        print(a[i][j], end="\t")
    print()

# Матрица поворота - поворот вектора заполнения матрицы на 90 градусов: dx,dy=(-dy,dx)
