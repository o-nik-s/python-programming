# task_03_01
'''Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой: 
f(x)=1−(x+2)**2 при x≤−2,
f(x)=-x/2 при −2<x≤2,
f(x)=(x−2)**2+1 при 2<x.
Требуется реализовать только функцию, решение не должно осуществлять операций ввода-вывода.'''

def f(x):
    if x <= -2:
        return 1 - (x + 2)**2
    elif -2 < x <= 2:
        return -x / 2
    elif 2 < x:
        return (x - 2)**2 + 1


# task_03_02
'''Напишите функцию modify_list(l), которая принимает на вход список целых чисел, 
удаляет из него все нечётные значения, а чётные нацело делит на два. Функция 
не должна ничего возвращать, требуется только изменение переданного списка.'''

def modify_list(l):
    for i in lst:
        # l(i) = int(l(i))
        a = 0
    else:
        l.remove(i)


lst = [20, 10, 10, 3]
print(modify_list(lst))  # None
print(lst)

test = ['0','0','1','1']
res = ['1' if x == '0' else '0' if x == '1' else x for x in test]
print(res)


# task_03_03
'''Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: 
key и value.

Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу. 
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2⋅key. Если и ключа 2⋅key нет, 
то нужно добавить ключ 2⋅key в словарь и сопоставить ему список из переданного элемента [value].

Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.'''


def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value,]
    elif 2*key in d:
        d[2*key] += [value,]
    else:
        d[2*key] = [value,]

# Должно бы работать с d[key].append([value,])!


d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}


x = {}
print(update_dictionary(x, 0, -5))  # None
print(x)                            # {0: [-5]}  (0*0=2)
update_dictionary(x, 1, -1)
print(x)                            # {0: [-5], 2: [-1]} (тк индекса 1 нет создаем key*2=2)
update_dictionary(x, 2, -2)
print(x)                            # {0: [-5], 2: [-1, -2]} (тк индекс 2 есть добавляем -2 в него)
update_dictionary(x, 3, -3)
print(x)                            # 0: [-5], 2: [-1, -2], 6: [-3]}


# task_03_04
'''Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве 
используется в этой книге.

Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, 
разделённые пробелом и вывести получившуюся статистику.

Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова 
в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода). 
Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.'''


def update_dictionary(d, key):
    if key in d:
        d[key] += 1
    else:
        d[key] = 1


inpt = input().split()
dict = {}
for s in inpt:
    update_dictionary(dict, s.lower())
for s in dict:
    print(s, dict[s])


# task_03_05
'''Имеется реализованная функция f(x), принимающая на вход целое число x, которая 
вычисляет некоторое целочисленое значение и возвращает его в качестве результата работы.
Функция вычисляется достаточно долго, ничего не выводит на экран, не пишет в файлы 
и зависит только от переданного аргумента x.
Напишите программу, которой на вход в первой строке подаётся число n — количество значений x,
для которых требуется узнать значение функции f(x), после чего сами эти n значений, 
каждое на отдельной строке. Программа должна после каждого введённого значения аргумента 
вывести соответствующие значения функции f на отдельной строке.
Для ускорения вычисления необходимо сохранять уже вычисленные значения функции 
при известных аргументах.'''


def f(x):
    s = 0
    for i in range(10**3):
        s += x
    return s


n = int(input())
d = {}
for i in range(1, n+1):
    x = int(input())
    if x not in d:
        d[x] = f(x)
    print(d[x])


# task_03_06
''' На прошлой неделе мы сжимали строки, используя кодирование повторов. 
Теперь нашей задачей будет восстановление исходной строки обратно.
Напишите программу, которая считывает из файла строку, соответствующую тексту, 
сжатому с помощью кодирования повторов, и производит обратную операцию, получая исходный текст.
Запишите полученный текст в файл и прикрепите его, как ответ на это задание.
В исходном тексте не встречаются цифры, так что код однозначно интерпретируем.
Примечание. Это первое задание типа Dataset Quiz. В таких заданиях после нажатия "Start Quiz" 
у вас появляется ссылка "download your dataset". Используйте эту ссылку для того, 
чтобы загрузить файл со входными данными к себе на компьютер. Запустите вашу программу, 
используя этот файл в качестве входных данных. Выходной файл, который при этом у вас получится, 
надо отправить в качестве ответа на эту задачу. '''


def reconstr_dictionary(line):  # reconstruction
    dict, key, value = {}, "", 0
    for symb in line:
        if symb.isalpha():
            if symb != '' and key != '':
                if key not in dict:
                    dict[key] = value
                elif key in dict:
                    dict[key] = dict[key] + value
            key = symb
            value = 0
        elif symb.isdigit():
            if value == 0:
                value = int(symb)
            else:
                value = 10**value + int(symb)
    if key not in dict:
        dict[key] = value
    elif key in dict:
        dict[key] = dict[key] + value
    return dict


def reconstr_string(line):  # reconstruction
    str, s, d = "", "", 0
    for symb in line:
        if symb.isalpha():
            if d != 0:
                str += s * d
            s = symb
            d = 0
        elif symb.isdigit():
            if d > 0:
                d = 10**d + int(symb)
            else:
                d = int(symb)
    str += s * d
    return str


dict = {}
with open('dataset_3363_2.txt', "r") as inpt:
# with open('task_03_06_input.txt', "r") as inpt:
    line = inpt.readline().strip()
print(line)
str = reconstr_string(line)
print(str)
with open('task_03_06_output.txt', "w") as oupt:
    oupt.write(str)



# task_03_07
'''Недавно мы считали для каждого слова количество его вхождений в строку. 
Но на все слова может быть не так интересно смотреть, как, например, 
на наиболее часто используемые.
Напишите программу, которая считывает текст из файла (в файле может быть 
больше одной строки) и выводит самое частое слово в этом тексте и через 
пробел то, сколько раз оно встретилось. Если таких слов несколько, 
вывести лексикографически первое (можно использовать оператор < для строк).
Слова, написанные в разных регистрах, считаются одинаковыми.'''


def update_dictionary(d, key):
    if key in d:
        d[key] += 1
    else:
        d[key] = 1


def findMaxWord(dic):
    max, maxKey = 0, ""
    for key in dic.keys():
        if dic[key] > max:
            max = dic[key]
            maxKey = key
    return maxKey, max

dict = {}
with open('dataset_3363_3.txt', "r") as inpt:
# with open('task_03_07_input.txt', "r") as inpt:
    for line in inpt:  # line будет принимать значения строки
        lineList = line.strip().split()
        for word in lineList:
            update_dictionary(dict, word.lower())
maxWord, maxCount = findMaxWord(dict)
str = maxWord + " " + str(maxCount)
print(str)
with open('task_03_07_output.txt', "w") as oupt:
    oupt.write(str)



# task_03_08
'''Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, 
где в каждой строке записана следующая информация:
Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку
Поля внутри строки разделены точкой с запятой, оценки — целые числа.
Напишите программу, которая считывает файл с подобной структурой и для каждого абитуриента 
выводит его среднюю оценку по этим трём предметам на отдельной строке, соответствующей этому абитуриенту.
Также в конце файла, на отдельной строке, через пробел запишите средние баллы по математике, 
физике и русскому языку по всем абитуриентам.
Примечание. Для разбиения строки на части по символу ';' можно использовать метод split следующим образом: 
print('First;Second-1 Second-2;Third'.split(';'))
# ['First', 'Second-1 Second-2', 'Third']'''

summ = [0, 0, 0]; count = 0
oupt = open('task_03_08_output.txt','w')
# with open('task_03_08_input.txt', "r") as inpt:
with open('dataset_3363_4.txt', "r") as inpt:
    for st in inpt:
        lst = st.strip().split(";")
        print(lst)
        mean = 0
        for i in range(0,3):
            mean += int(lst[i+1])
            summ[i] += int(lst[i+1])
        mean /= 3
        count += 1
        oupt.write(str(mean) + '\n')
        print(mean)
for i in range(0,3):
    oupt.write(str(summ[i]/count) + " ")
    print(str(summ[i]/count), end=" ")
oupt.close()



# task_03_09
# Напишите программу, которая подключает модуль math и, используя значение числа ππ из этого модуля,
# находит для переданного ей на стандартный ввод радиуса круга периметр этого круга и выводит его на стандартный вывод.

import math

r = float(input())
p = 2 * math.pi * r
print(p)



# task_03_10
'''Напишите программу, которая запускается из консоли и печатает значения всех переданных аргументов 
на экран (имя скрипта выводить не нужно). Не изменяйте порядок аргументов при выводе.

Для доступа к аргументам командной строки программы подключите модуль sys 
и используйте переменную argv из этого модуля.'''

import sys

lst = list(sys.argv)
for nArg in range(1, len(lst)):
    print(lst[nArg], end=" ")



# task_03_11
'''Скачайте файл. В нём указан адрес другого файла, который нужно скачать 
с использованием модуля requests и посчитать число строк в нём.
Используйте функцию get для получения файла (имеет смысл вызвать метод strip 
к передаваемому параметру, чтобы убрать пробельные символы по краям).
После получения файла вы можете проверить результат, обратившись к полю text. 
Если результат работы скрипта не принимается, проверьте поле url на правильность. 
Для подсчёта количества строк разбейте текст с помощью метода splitlines.
В поле ответа введите одно число или отправьте файл, содержащий одно число.'''


import requests

# inpt = open('task_03_11_input.txt', 'r')
inpt = open('dataset_3378_2.txt', 'r')
url = inpt.readline().strip()
inpt.close()
print(url)

req = requests.get(url)
text = req.text
print(text)
print(len(text.splitlines()))



# task_03_12
'''Имеется набор файлов, каждый из которых, кроме последнего, содержит имя следующего файла.
Первое слово в тексте последнего файла: "We".

Скачайте предложенный файл. В нём содержится ссылка на первый файл из этого набора. 

Все файлы располагаются в каталоге по адресу:
https://stepic.org/media/attachments/course67/3.6.3/

Загрузите содержимое ﻿последнего файла из набора, как ответ на это задание.'''


import requests

# inpt = open('task_03_12_input.txt', 'r')
inpt = open('dataset_3378_3.txt', 'r')
url = inpt.readline().strip()
inpt.close()

path = "https://stepic.org/media/attachments/course67/3.6.3/"
print(url)
txt = requests.get(url).text
while txt[:2] != "We":
    url = path + txt.strip()
    print(url)
    txt = requests.get(url).text
print(txt)



# task_03_13
'''
Напишите программу, которая принимает на стандартный вход список игр футбольных команд 
с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.

За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.

Формат ввода следующий:
В первой строке указано целое число n — количество завершенных игр.
После этого идет n строк, в которых записаны результаты игры в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой

Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков

Конкретный пример ввода-вывода приведён ниже.

Порядок вывода команд произвольный.
'''


def procOfResults(team, result):
    if team == result[0]:
        return result[1] > result[3], result[1] == result[3], result[1] < result[3]
    elif team == result[2]:
        return result[3] > result[1], result[3] == result[1], result[3] < result[1]
    return 0, 0, 0


n = int(input())
results = []
teamsList = set()
totalResult = dict()
for i in range(n):
    results.append(input().strip().split(";"))
    teamsList.add(results[i][0])
    teamsList.add(results[i][2])
    print(results)
for team in teamsList:
    print("--------------")
    print(team)
    totalResult[team] = [0, 0, 0]  # Побед, ничьих, поражений
    for i in range(n):
        print(results[i])
        print(procOfResults(team, results[i]))
        for j in range(3):
             totalResult[team][j] += procOfResults(team, results[i])[j]
        print("totalResult:", totalResult)
print("---------------")
print(results)
print(teamsList)
print(totalResult)
print("---------------")
for key, value in totalResult.items():
    print(key, ":", value[0] + value[1] + value[2], " ", value[0], " ", value[1], " ", value[2], " ", 3 * value[0] + value[1], sep="")



# task_03_14
'''В какой-то момент в Институте биоинформатики биологи перестали понимать, 
что говорят информатики: они говорили каким-то странным набором звуков. 

В какой-то момент один из биологов раскрыл секрет информатиков: они использовали 
при общении подстановочный шифр, т.е. заменяли каждый символ исходного сообщения 
на соответствующий ему другой символ. Биологи раздобыли ключ к шифру и теперь нуждаются в помощи: 

Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. 
Программа принимает на вход две строки одинаковой длины, на первой строке записаны 
символы исходного алфавита, на второй строке — символы конечного алфавита, 
после чего идёт строка, которую нужно зашифровать переданным ключом, и ещё 
одна строка, которую нужно расшифровать.

Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%

Это значит, что символ a исходного сообщения заменяется на символ * в шифре, 
b заменяется на d, c — на % и d — на #.
Нужно зашифровать строку abacabadaba и расшифровать строку #*%*d*% с помощью этого шифра. 
Получаем следующие строки, которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac'''


alpha, beta = input(), input()
strAlpha, strBeta = input(), input()
# a,b = input().splitlines() - получит две переменные, первая и вторая строка (в данном случае)
# Модератор курса

for s in strAlpha:
    print(beta[alpha.find(s)], end="")
print()
for s in strBeta:
    print(alpha[beta.find(s)], end="")



# task_03_15
'''Группа биологов в институте биоинформатики завела себе черепашку.

После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — 
это положительное расстояние в сантиметрах, которое должна пройти черепашка.

Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно 
написать программу, которая определит, куда в итоге биологи приведут черепашку. Для этого 
программисты просят вас написать программу, которая выведет точку, в которой окажется черепашка 
после всех команд. Для простоты они решили считать, что движение начинается в точке (0, 0), и движение 
на восток увеличивает первую координату, а на север — вторую.

Программе подаётся на вход число команд n, которые нужно выполнить черепашке, после чего n строк 
с самими командами. Вывести нужно два числа в одну строку: первую и вторую координату конечной 
точки черепашки. Все координаты целочисленные.'''


pos = [0, 0]
n = int(input())
for i in range(n):
    move = input().split(" ")
    if move[0] == "север":
        pos[1] += int(move[1])
    elif move[0] == "запад":
        pos[0] -= int(move[1])
    elif move[0] == "юг":
        pos[1] -= int(move[1])
    elif move[0] == "восток":
        pos[0] += int(move[1])
    # print(pos)
print(pos[0], pos[1])



# task_03_16
'''Группа биологов в институте биоинформатики завела себе черепашку.

После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — 
это положительное расстояние в сантиметрах, которое должна пройти черепашка.

Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно 
написать программу, которая определит, куда в итоге биологи приведут черепашку. Для этого 
программисты просят вас написать программу, которая выведет точку, в которой окажется черепашка 
после всех команд. Для простоты они решили считать, что движение начинается в точке (0, 0), и движение 
на восток увеличивает первую координату, а на север — вторую.

Программе подаётся на вход число команд n, которые нужно выполнить черепашке, после чего n строк 
с самими командами. Вывести нужно два числа в одну строку: первую и вторую координату конечной 
точки черепашки. Все координаты целочисленные.'''


pos = [0, 0]
n = int(input())
for i in range(n):
    move = input().split(" ")
    if move[0] == "север":
        pos[1] += int(move[1])
    elif move[0] == "запад":
        pos[0] -= int(move[1])
    elif move[0] == "юг":
        pos[1] -= int(move[1])
    elif move[0] == "восток":
        pos[0] += int(move[1])
    # print(pos)
print(pos[0], pos[1])



# task_03_17
'''Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.
Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.
Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост
Класс обозначается только числом. Буквенные модификаторы не используются. Номер класса может быть 
от 1 до 11 включительно. В фамилии нет пробелов, а в качестве роста используется натуральное число, 
но при подсчёте среднего требуется вычислить значение в виде вещественного числа.
Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого 
по одиннадцатый). Если про какой-то класс нет информации, необходимо вывести напротив него прочерк.'''

height = list()
classHeight = [[0 for j in range(2)] for i in range(0, 11)]
# with open('task_03_17_input.txt', "r") as inpt:  # encoding="UTF-8"
with open('dataset_3380_5.txt', "r") as inpt:
    for line in inpt:  # line будет принимать значения строки
        lineList = line.strip().split("\t")  # strip() убирает все служебные символы при члении строки
        height.append(lineList)
        print(int(lineList[0]))
        classHeight[int(lineList[0])-1][0] += int(lineList[2])
        classHeight[int(lineList[0])-1][1] += 1
        print(classHeight)
for i in range(11):
    if classHeight[i][1] == 0:
        print(i+1, "-")
    else:
        print(i+1, classHeight[i][0]/classHeight[i][1])
